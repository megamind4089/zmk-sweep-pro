// mouse move settings
#define MMV_U MOVE_VERT(-650)
#define MMV_D MOVE_VERT(650)
#define MMV_L MOVE_HOR(-650)
#define MMV_R MOVE_HOR(650)

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent=<1>;
};

// mouse wheel settings
#define MWH_U SCROLL_VERT(15)
#define MWH_D SCROLL_VERT(-15)
#define MWH_L SCROLL_HOR(-15)
#define MWH_R SCROLL_HOR(15)

&mwh {
    time-to-max-speed-ms = <2000>;
    acceleration-exponent=<0>;
};


/ {

    // macros
    macros {
        ZMK_MACRO(hello,
            wait-ms = <0>;
            tap-ms  = <10>;
            bindings = <&kp H &kp E &kp L &kp L &kp O>;
            )

        ZMK_MACRO(nxt_tab,
            wait-ms = <0>;
            tap-ms  = <10>;
            bindings = <&kp LC(TAB)>;
            )

        ZMK_MACRO(prv_tab,
            wait-ms = <0>;
            tap-ms  = <10>;
            bindings = <&kp LC(LS(TAB))>;
            )
    };

    // custom shift using mod-morph
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        cmqus: comma_question {
           compatible = "zmk,behavior-mod-morph";
           label = "COMMA_QUESTION";
           #binding-cells = <0>;
           bindings = <&kp COMMA>, <&kp QUESTION>;
           mods = <(MOD_LSFT|MOD_RSFT)>;
       };

        dtsmi: dot_semi {
           compatible = "zmk,behavior-mod-morph";
           label = "DOT_SEMI";
           #binding-cells = <0>;
           bindings = <&kp DOT>, <&kp SEMI>;
           mods = <(MOD_LSFT|MOD_RSFT)>;
           masked_mods = <(MOD_LSFT|MOD_RSFT)>; // don't send shift
       };
    };

    // combos
    combos {
        compatible = "zmk,combos";
        // right hand
        combo_fullscreen {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp F11>;
        };

        combo_wkspc_up {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LG(PG_UP)>;
        };

        combo_wkspc_down {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LG(PG_DN)>;
        };

        combo_win_up {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LS(LG(PG_UP))>;
        };

        combo_win_down {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LS(LG(PG_DN))>;
        };

        combo_win_left {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LS(LG(LEFT))>;
        };

        combo_win_right {
            timeout-ms = <50>;
            key-positions = <9 18>;
            bindings = <&kp LS(LG(RIGHT))>;
        };

        combo_rdelete {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DELETE>;
        };

        // left hand
        combo_ldelete {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp DELETE>;
        };

        combo_zoomin {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LC(PLUS)>;
        };

        combo_zoomout {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LC(MINUS)>;
        };

        combo_pgdn {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp PG_DN>;
        };

        combo_pgup {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp PG_UP>;
        };

        combo_mb_lclick {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&mkp LCLK>;
        };

        combo_mb_rclick {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&mkp RCLK>;
        };

        combo_mb_mclick {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&mkp MCLK>;
        };

        // symbols
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp UNDERSCORE>;
        };

        // others
        combo_capswd {
            timeout-ms = <50>;
            key-positions = <2 7>;
            bindings = <&caps_word>;
        };

        combo_lsym {
            timeout-ms = <50>;
            key-positions = <33 36>;
            bindings = <&tog SYM>;
        };

        combo_lnum {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&tog NUM>;
        };

        // output selection
        combo_outble {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&out OUT_USB>;
        };

        combo_outtog {
            timeout-ms = <50>;
            key-positions = <4 24>;
            bindings = <&out OUT_TOG>;
        };

        // ble selection
        combo_ble1 {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_ble2 {
            timeout-ms = <50>;
            key-positions = <13 23>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_ble3 {
            timeout-ms = <50>;
            key-positions = <12 22>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_ble4 {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&bt BT_SEL 3>;
        };

        combo_ble5 {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&bt BT_SEL 4>;
        };
    };
};
